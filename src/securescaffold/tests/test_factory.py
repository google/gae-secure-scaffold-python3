# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock

import pytest
from flask import Flask
from google.cloud import ndb

from securescaffold import factory
from securescaffold import emulator


@pytest.fixture(scope="session")
def datastore():
    """Start and stop the datastore emulator."""
    with emulator.DatastoreEmulatorForTests():
        yield


@pytest.fixture(scope="function")
def ndb_client(datastore):
    client = ndb.Client()

    yield client

    # Now delete all entities.
    with client.context():
        for key in ndb.Query().iter(keys_only=True):
            key.delete_async()


def test_create_app_returns_an_app(ndb_client):
    app = factory.create_app("test")

    assert isinstance(app, Flask)


def test_create_app_does_not_add_report_to_headers(ndb_client):
    app = factory.create_app("test")
    client = app.test_client()

    resp = client.get("/")

    assert "Report-To" not in resp.headers


def test_create_app_adds_csp_headers(ndb_client):
    app = factory.create_app("test")
    client = app.test_client()

    resp = client.get("/")

    expected = (
        "font-src 'self' themes.googleusercontent.com *.gstatic.com; frame-src"
        " 'self' www.google.com www.youtube.com; script-src 'self'"
        " ajax.googleapis.com *.googleanalytics.com *.google-analytics.com;"
        " style-src 'self' ajax.googleapis.com fonts.googleapis.com"
        " *.gstatic.com; object-src 'none'; default-src 'self' *.gstatic.com"
    )
    assert resp.headers["Content-Security-Policy"] == expected


def test_create_app_adds_other_security_headers(ndb_client):
    """Useful security headers generated by flask-talisman."""
    app = factory.create_app("test")
    client = app.test_client()
    response = client.get("/")

    assert response.headers["Referrer-Policy"] == "strict-origin-when-cross-origin"
    assert response.headers["X-Content-Type-Options"] == "nosniff"
    assert response.headers["X-Frame-Options"] == "SAMEORIGIN"
    assert response.headers["X-Xss-Protection"] == "1; mode=block"


def test_extra_flask_args(ndb_client):
    app = factory.create_app("test", static_url_path="/foo")
    assert app.static_url_path == "/foo"


def test_given_flask_name(ndb_client):
    app = factory.create_app("foo")
    assert app.name == "foo"


def test_create_app_creates_secret_key(ndb_client):
    with mock.patch("secrets.token_urlsafe", return_value="topsecret"):
        app = factory.create_app("test")

    with ndb_client.context():
        obj = factory.AppConfig.get_by_id(factory.AppConfig.SINGLETON_ID)
        assert obj.secret_key == app.config["SECRET_KEY"]
        assert app.config["SECRET_KEY"] == "topsecret"


def test_create_app_uses_existing_secret_key(ndb_client):
    with ndb_client.context():
        id_ = factory.AppConfig.SINGLETON_ID
        factory.AppConfig(id=id_, secret_key="hunter2").put()

    app = factory.create_app("test")

    assert app.config["SECRET_KEY"] == "hunter2"


def test_get_talisman_config():
    """Check what keyword arguments we will feed to flask-talisman."""
    config = {
        "CSP_POLICY": {"foo": "bar"},
        "CSP_POLICY_NONCE_IN": ["script-src", "style-src"],
        "CSP_POLICY_REPORT_ONLY": True,
        "CSP_POLICY_REPORT_URI": "/baz",
    }
    result = factory.get_talisman_config(config)

    expected = {
        "content_security_policy": {"foo": "bar"},
        "content_security_policy_nonce_in": ["script-src", "style-src"],
        "content_security_policy_report_only": True,
        "content_security_policy_report_uri": "/baz",
    }

    assert result == expected
